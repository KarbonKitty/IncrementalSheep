@page "/"
@using System.Timers
@using IncrementalSheep.Components.BranchComponents
@using IncrementalSheep.Components.ResourceComponents

<div class="container">
    <Toast />

    <div class="title">
        <h2>IncrementalSheep</h2>
        <div class="topbar-buttons">
            <a href="#" @onclick="SaveGame">Save game</a>
            <a href="#" @onclick="LoadGame">Load game</a>
            <a href="#" @onclick="ClearSave">Remove save</a>
        </div>
    </div>

    <div class="sidebar">
        <ResourceWarehouseList Warehouse=@Engine.State.Resources />
        <MessageLog Messages=@Engine.Log FirstMessageIndex=@Engine.LogIndex />
    </div>

    <div class="branches">
        <BranchButton Branch=@Branch.Population Text="Sheep management" />
        <BranchButton Branch=@Branch.Buildings Text="Camp" />
        <BranchButton Branch=@Branch.Hunting Text="Hunting" />
        <BranchButton Branch=@Branch.Folklore Text="Folklore" />
    </div>

    <div class="buildings">
        @switch (Engine.State.SelectedBranch)
        {
            case Branch.Population:
                <PopulationBranch Sheep=@Engine.State.Sheep />
                break;
            case Branch.Buildings:
                <BuildingBranch Structures=@Engine.State.Structures />
                break;
            case Branch.Hunting:
                <HuntingBranch Hunts=@Engine.State.Hunts />
                break;
            case Branch.Folklore:
                <FolkloreBranch Ideas=@Engine.State.Ideas />
                break;
        }
    </div>

    <div class="details">
        @switch (Engine.State.SelectedBranch)
        {
            case Branch.Buildings:
                <StructureDetails Structure=@Engine.State.SelectedStructure />
            break;
            case Branch.Population:
                if (Engine.State.SelectedSheep is null)
                {
                    <RecruitmentDetails />
                }
                else
                {
                    <SheepDetails Sheep=@Engine.State.SelectedSheep />
                }
            break;
            case Branch.Hunting:
                <HuntDetails Hunt=@Engine.State.SelectedHunt />
                break;
            case Branch.Folklore:
                <IdeaDetails Idea=@Engine.State.SelectedIdea />
                break;
            }
    </div>
</div>

@code {
    [Inject] private SaveGameProcessor SaveGameProcessor { get; set; } = default!;
    [Inject] protected GameEngine Engine { get; set; } = default!;
    [Inject] private IToastService ToastService { get; set; } = default!;
    protected Timer? gameTimer;
    protected Timer? autoSaveTimer;

    protected override void OnInitialized()
    {
        gameTimer = new Timer
        {
            Interval = 50
        };
        gameTimer.Elapsed += LoopStep;
        gameTimer.Start();

        autoSaveTimer = new Timer {
            Interval = 30_000
        };
        autoSaveTimer.Elapsed += AutoSave;
        autoSaveTimer.Start();

        // this doesn't do anything if there is no saved game data
#pragma warning disable CS4014
        LoadGame();
#pragma warning restore CS4014
    }

    private void LoopStep(object? sender, ElapsedEventArgs e)
    {
        Engine.ProcessTime(e.SignalTime);
        this.StateHasChanged();
    }

    private async void AutoSave(object? sender, ElapsedEventArgs e)
    {
        await this.SaveGame();
        ToastService.ShowToast("Game saved!");
    }

    private async Task SaveGame()
    {
        await SaveGameProcessor.SaveGame(Engine.State);
        ToastService.ShowToast("Game manually saved");
    }

    private async Task ClearSave()
    {
        await SaveGameProcessor.ClearSave();
        ToastService.ShowToast("Save cleared");
    }

    private async Task LoadGame()
    {
        var serializedState = await SaveGameProcessor.GetSavedGameString();
        if (serializedState is not null)
        {
            var state = SaveGameProcessor.LoadGame(serializedState);
            Engine.State = state;
            ToastService.ShowToast("Game loaded");
        }
    }
}
